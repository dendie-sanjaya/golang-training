// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/shorturl_service/v1/shorturl.proto

package shorturl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ShortUrlService_CreateShortUrl_FullMethodName = "/proto.shorturl_service.v1.ShortUrlService/CreateShortUrl"
	ShortUrlService_GetShortUrl_FullMethodName    = "/proto.shorturl_service.v1.ShortUrlService/GetShortUrl"
)

// ShortUrlServiceClient is the client API for ShortUrlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlServiceClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortResponse, error)
	GetShortUrl(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortRespons, error)
}

type shortUrlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlServiceClient(cc grpc.ClientConnInterface) ShortUrlServiceClient {
	return &shortUrlServiceClient{cc}
}

func (c *shortUrlServiceClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortResponse)
	err := c.cc.Invoke(ctx, ShortUrlService_CreateShortUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlServiceClient) GetShortUrl(ctx context.Context, in *GetShortRequest, opts ...grpc.CallOption) (*GetShortRespons, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShortRespons)
	err := c.cc.Invoke(ctx, ShortUrlService_GetShortUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServiceServer is the server API for ShortUrlService service.
// All implementations must embed UnimplementedShortUrlServiceServer
// for forward compatibility
type ShortUrlServiceServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortResponse, error)
	GetShortUrl(context.Context, *GetShortRequest) (*GetShortRespons, error)
	mustEmbedUnimplementedShortUrlServiceServer()
}

// UnimplementedShortUrlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlServiceServer struct {
}

func (UnimplementedShortUrlServiceServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortUrlServiceServer) GetShortUrl(context.Context, *GetShortRequest) (*GetShortRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortUrl not implemented")
}
func (UnimplementedShortUrlServiceServer) mustEmbedUnimplementedShortUrlServiceServer() {}

// UnsafeShortUrlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServiceServer will
// result in compilation errors.
type UnsafeShortUrlServiceServer interface {
	mustEmbedUnimplementedShortUrlServiceServer()
}

func RegisterShortUrlServiceServer(s grpc.ServiceRegistrar, srv ShortUrlServiceServer) {
	s.RegisterService(&ShortUrlService_ServiceDesc, srv)
}

func _ShortUrlService_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServiceServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrlService_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServiceServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrlService_GetShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServiceServer).GetShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrlService_GetShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServiceServer).GetShortUrl(ctx, req.(*GetShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrlService_ServiceDesc is the grpc.ServiceDesc for ShortUrlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.shorturl_service.v1.ShortUrlService",
	HandlerType: (*ShortUrlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortUrlService_CreateShortUrl_Handler,
		},
		{
			MethodName: "GetShortUrl",
			Handler:    _ShortUrlService_GetShortUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shorturl_service/v1/shorturl.proto",
}
