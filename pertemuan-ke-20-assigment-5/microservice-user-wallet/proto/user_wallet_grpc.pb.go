// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/user_wallet.proto

package user_wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserWalletService_Topup_FullMethodName                         = "/proto.user_wallet_service.v1.UserWalletService/Topup"
	UserWalletService_Transfer_FullMethodName                      = "/proto.user_wallet_service.v1.UserWalletService/Transfer"
	UserWalletService_GetUserBalance_FullMethodName                = "/proto.user_wallet_service.v1.UserWalletService/GetUserBalance"
	UserWalletService_GetTransactionHistory_FullMethodName         = "/proto.user_wallet_service.v1.UserWalletService/GetTransactionHistory"
	UserWalletService_CreateWallet_FullMethodName                  = "/proto.user_wallet_service.v1.UserWalletService/CreateWallet"
	UserWalletService_UpdateWallet_FullMethodName                  = "/proto.user_wallet_service.v1.UserWalletService/UpdateWallet"
	UserWalletService_DeleteWallet_FullMethodName                  = "/proto.user_wallet_service.v1.UserWalletService/DeleteWallet"
	UserWalletService_GetUserBalanceByWallet_FullMethodName        = "/proto.user_wallet_service.v1.UserWalletService/GetUserBalanceByWallet"
	UserWalletService_GetTransactionHistoryByWallet_FullMethodName = "/proto.user_wallet_service.v1.UserWalletService/GetTransactionHistoryByWallet"
	UserWalletService_GetSpend_FullMethodName                      = "/proto.user_wallet_service.v1.UserWalletService/GetSpend"
)

// UserWalletServiceClient is the client API for UserWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWalletServiceClient interface {
	Topup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*TopupResponse, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error)
	DeleteWallet(ctx context.Context, in *DeleteWalletRequest, opts ...grpc.CallOption) (*DeleteWalletResponse, error)
	GetUserBalanceByWallet(ctx context.Context, in *GetUserBalanceByWalletRequest, opts ...grpc.CallOption) (*GetUserBalanceByWalletResponse, error)
	GetTransactionHistoryByWallet(ctx context.Context, in *GetTransactionHistoryByWalletRequest, opts ...grpc.CallOption) (*GetTransactionHistoryByWalletResponse, error)
	GetSpend(ctx context.Context, in *GetSpendRequest, opts ...grpc.CallOption) (*GetSpendResponse, error)
}

type userWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWalletServiceClient(cc grpc.ClientConnInterface) UserWalletServiceClient {
	return &userWalletServiceClient{cc}
}

func (c *userWalletServiceClient) Topup(ctx context.Context, in *TopupRequest, opts ...grpc.CallOption) (*TopupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopupResponse)
	err := c.cc.Invoke(ctx, UserWalletService_Topup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, UserWalletService_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetUserBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*GetTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) UpdateWallet(ctx context.Context, in *UpdateWalletRequest, opts ...grpc.CallOption) (*UpdateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_UpdateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) DeleteWallet(ctx context.Context, in *DeleteWalletRequest, opts ...grpc.CallOption) (*DeleteWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_DeleteWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetUserBalanceByWallet(ctx context.Context, in *GetUserBalanceByWalletRequest, opts ...grpc.CallOption) (*GetUserBalanceByWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBalanceByWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetUserBalanceByWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetTransactionHistoryByWallet(ctx context.Context, in *GetTransactionHistoryByWalletRequest, opts ...grpc.CallOption) (*GetTransactionHistoryByWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionHistoryByWalletResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetTransactionHistoryByWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWalletServiceClient) GetSpend(ctx context.Context, in *GetSpendRequest, opts ...grpc.CallOption) (*GetSpendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpendResponse)
	err := c.cc.Invoke(ctx, UserWalletService_GetSpend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWalletServiceServer is the server API for UserWalletService service.
// All implementations must embed UnimplementedUserWalletServiceServer
// for forward compatibility
type UserWalletServiceServer interface {
	Topup(context.Context, *TopupRequest) (*TopupResponse, error)
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error)
	DeleteWallet(context.Context, *DeleteWalletRequest) (*DeleteWalletResponse, error)
	GetUserBalanceByWallet(context.Context, *GetUserBalanceByWalletRequest) (*GetUserBalanceByWalletResponse, error)
	GetTransactionHistoryByWallet(context.Context, *GetTransactionHistoryByWalletRequest) (*GetTransactionHistoryByWalletResponse, error)
	GetSpend(context.Context, *GetSpendRequest) (*GetSpendResponse, error)
	mustEmbedUnimplementedUserWalletServiceServer()
}

// UnimplementedUserWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserWalletServiceServer struct {
}

func (UnimplementedUserWalletServiceServer) Topup(context.Context, *TopupRequest) (*TopupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topup not implemented")
}
func (UnimplementedUserWalletServiceServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedUserWalletServiceServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedUserWalletServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*GetTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedUserWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedUserWalletServiceServer) UpdateWallet(context.Context, *UpdateWalletRequest) (*UpdateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWallet not implemented")
}
func (UnimplementedUserWalletServiceServer) DeleteWallet(context.Context, *DeleteWalletRequest) (*DeleteWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWallet not implemented")
}
func (UnimplementedUserWalletServiceServer) GetUserBalanceByWallet(context.Context, *GetUserBalanceByWalletRequest) (*GetUserBalanceByWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalanceByWallet not implemented")
}
func (UnimplementedUserWalletServiceServer) GetTransactionHistoryByWallet(context.Context, *GetTransactionHistoryByWalletRequest) (*GetTransactionHistoryByWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistoryByWallet not implemented")
}
func (UnimplementedUserWalletServiceServer) GetSpend(context.Context, *GetSpendRequest) (*GetSpendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpend not implemented")
}
func (UnimplementedUserWalletServiceServer) mustEmbedUnimplementedUserWalletServiceServer() {}

// UnsafeUserWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWalletServiceServer will
// result in compilation errors.
type UnsafeUserWalletServiceServer interface {
	mustEmbedUnimplementedUserWalletServiceServer()
}

func RegisterUserWalletServiceServer(s grpc.ServiceRegistrar, srv UserWalletServiceServer) {
	s.RegisterService(&UserWalletService_ServiceDesc, srv)
}

func _UserWalletService_Topup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).Topup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_Topup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).Topup(ctx, req.(*TopupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_UpdateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).UpdateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_UpdateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).UpdateWallet(ctx, req.(*UpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_DeleteWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).DeleteWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_DeleteWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).DeleteWallet(ctx, req.(*DeleteWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetUserBalanceByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceByWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetUserBalanceByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetUserBalanceByWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetUserBalanceByWallet(ctx, req.(*GetUserBalanceByWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetTransactionHistoryByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryByWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetTransactionHistoryByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetTransactionHistoryByWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetTransactionHistoryByWallet(ctx, req.(*GetTransactionHistoryByWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWalletService_GetSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWalletServiceServer).GetSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWalletService_GetSpend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWalletServiceServer).GetSpend(ctx, req.(*GetSpendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWalletService_ServiceDesc is the grpc.ServiceDesc for UserWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.user_wallet_service.v1.UserWalletService",
	HandlerType: (*UserWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Topup",
			Handler:    _UserWalletService_Topup_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _UserWalletService_Transfer_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _UserWalletService_GetUserBalance_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _UserWalletService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _UserWalletService_CreateWallet_Handler,
		},
		{
			MethodName: "UpdateWallet",
			Handler:    _UserWalletService_UpdateWallet_Handler,
		},
		{
			MethodName: "DeleteWallet",
			Handler:    _UserWalletService_DeleteWallet_Handler,
		},
		{
			MethodName: "GetUserBalanceByWallet",
			Handler:    _UserWalletService_GetUserBalanceByWallet_Handler,
		},
		{
			MethodName: "GetTransactionHistoryByWallet",
			Handler:    _UserWalletService_GetTransactionHistoryByWallet_Handler,
		},
		{
			MethodName: "GetSpend",
			Handler:    _UserWalletService_GetSpend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_wallet.proto",
}
